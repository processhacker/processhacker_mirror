Index: colmgr.c
===================================================================
--- colmgr.c	(revision 4374)
+++ colmgr.c	(working copy)
@@ -117,7 +117,7 @@
     {
         column = CONTAINING_RECORD(listEntry, PH_CM_COLUMN, ListEntry);
 
-        if (column->SubId == SubId && PhEqualStringRef2(PluginName, column->Plugin->Name, FALSE))
+        if (column->SubId == SubId && PhEqualStringRef(PluginName, &column->Plugin->AppContext.AppName, FALSE))
             return column;
 
         listEntry = listEntry->Flink;
Index: include/mainwndp.h
===================================================================
--- include/mainwndp.h	(revision 4366)
+++ include/mainwndp.h	(working copy)
@@ -107,11 +107,6 @@
     __in_opt PVOID Context
     );
 
-VOID NTAPI PhMwpProcessesUpdatedForIconsHandler(
-    __in_opt PVOID Parameter,
-    __in_opt PVOID Context
-    );
-
 VOID NTAPI PhMwpServiceAddedHandler(
     __in_opt PVOID Parameter,
     __in_opt PVOID Context
Index: include/phapp.h
===================================================================
--- include/phapp.h	(revision 4366)
+++ include/phapp.h	(working copy)
@@ -452,6 +452,10 @@
     __in INT ShowCommand
     );
 
+VOID PhShowIconContextMenu(
+    __in POINT Location
+    );
+
 PHAPPAPI
 VOID PhShowIconNotification(
     __in PWSTR Title,
@@ -638,53 +642,6 @@
     __in PPH_PROCESS_PROPCONTEXT Context
     );
 
-// notifico
-
-#define PH_ICON_MINIMUM 0x1
-#define PH_ICON_CPU_HISTORY 0x1
-#define PH_ICON_IO_HISTORY 0x2
-#define PH_ICON_COMMIT_HISTORY 0x4
-#define PH_ICON_PHYSICAL_HISTORY 0x8
-#define PH_ICON_CPU_USAGE 0x10
-#define PH_ICON_MAXIMUM 0x20
-
-VOID PhAddNotifyIcon(
-    __in ULONG Id
-    );
-
-VOID PhRemoveNotifyIcon(
-    __in ULONG Id
-    );
-
-VOID PhModifyNotifyIcon(
-    __in ULONG Id,
-    __in ULONG Flags,
-    __in_opt PWSTR Text,
-    __in_opt HICON Icon
-    );
-
-VOID PhShowBalloonTipNotifyIcon(
-    __in ULONG Id,
-    __in PWSTR Title,
-    __in PWSTR Text,
-    __in ULONG Timeout,
-    __in ULONG Flags
-    );
-
-HICON PhBitmapToIcon(
-    __in HBITMAP Bitmap
-    );
-
-VOID PhUpdateIconCpuHistory();
-
-VOID PhUpdateIconIoHistory();
-
-VOID PhUpdateIconCommitHistory();
-
-VOID PhUpdateIconPhysicalHistory();
-
-VOID PhUpdateIconCpuUsage();
-
 // log
 
 #define PH_LOG_ENTRY_PROCESS_FIRST 1
Index: include/phplug.h
===================================================================
--- include/phplug.h	(revision 4372)
+++ include/phplug.h	(working copy)
@@ -33,8 +33,8 @@
     GeneralCallbackNetworkTreeNewInitializing = 19, // PPH_PLUGIN_TREENEW_INFORMATION Data [main thread]
     GeneralCallbackModuleTreeNewInitializing = 20, // PPH_PLUGIN_TREENEW_INFORMATION Data [properties thread]
     GeneralCallbackModuleTreeNewUninitializing = 21, // PPH_PLUGIN_TREENEW_INFORMATION Data [properties thread]
-    GeneralCallbackThreadTreeNewInitializing = 20, // PPH_PLUGIN_TREENEW_INFORMATION Data [properties thread]
-    GeneralCallbackThreadTreeNewUninitializing = 21, // PPH_PLUGIN_TREENEW_INFORMATION Data [properties thread]
+    GeneralCallbackThreadTreeNewInitializing = 22, // PPH_PLUGIN_TREENEW_INFORMATION Data [properties thread]
+    GeneralCallbackThreadTreeNewUninitializing = 23, // PPH_PLUGIN_TREENEW_INFORMATION Data [properties thread]
 
     GeneralCallbackMaximum
 } PH_GENERAL_CALLBACK, *PPH_GENERAL_CALLBACK;
Index: mainwnd.c
===================================================================
--- mainwnd.c	(revision 4366)
+++ mainwnd.c	(working copy)
@@ -27,6 +27,7 @@
 #include <phplug.h>
 #include <cpysave.h>
 #include <mainwndp.h>
+#include <notifico.h>
 #include <memsrch.h>
 #include <symprv.h>
 #include <windowsx.h>
@@ -51,7 +52,6 @@
 static BOOLEAN NeedsMaximize = FALSE;
 
 static BOOLEAN DelayedLoadCompleted = FALSE;
-static ULONG NotifyIconMask;
 static ULONG NotifyIconNotifyMask;
 
 static RECT LayoutPadding = { 0, 0, 0, 0 };
@@ -78,7 +78,6 @@
 static PH_CALLBACK_REGISTRATION ProcessModifiedRegistration;
 static PH_CALLBACK_REGISTRATION ProcessRemovedRegistration;
 static PH_CALLBACK_REGISTRATION ProcessesUpdatedRegistration;
-static PH_CALLBACK_REGISTRATION ProcessesUpdatedForIconsRegistration;
 static BOOLEAN ProcessesNeedsRedraw = FALSE;
 
 static PH_PROVIDER_REGISTRATION ServiceProviderRegistration;
@@ -250,7 +249,7 @@
 
     UpdateWindow(PhMainWndHandle);
 
-    if ((PhStartupParameters.ShowHidden || PhGetIntegerSetting(L"StartHidden")) && NotifyIconMask != 0)
+    if ((PhStartupParameters.ShowHidden || PhGetIntegerSetting(L"StartHidden")) && PhNfTestIconMask(PH_ICON_ALL))
         ShowCommand = SW_HIDE;
     if (PhStartupParameters.ShowVisible)
         ShowCommand = SW_SHOW;
@@ -511,12 +510,6 @@
         NULL,
         &ProcessesUpdatedRegistration
         );
-    PhRegisterCallback(
-        &PhProcessesUpdatedEvent,
-        PhMwpProcessesUpdatedForIconsHandler,
-        NULL,
-        &ProcessesUpdatedForIconsRegistration
-        );
 
     PhRegisterCallback(
         &PhServiceAddedEvent,
@@ -573,16 +566,10 @@
     __in PVOID Parameter
     )
 {
-    ULONG i;
-
     // Register for window station notifications.
     WinStationRegisterConsoleNotification(NULL, PhMainWndHandle, WNOTIFY_ALL_SESSIONS);
 
-    for (i = PH_ICON_MINIMUM; i != PH_ICON_MAXIMUM; i <<= 1)
-    {
-        if (NotifyIconMask & i)
-            PhAddNotifyIcon(i);
-    }
+    PhNfLoadStage2();
 
     // Make sure we get closed late in the shutdown process.
     SetProcessShutdownParameters(0x100, 0);
@@ -597,23 +584,11 @@
     VOID
     )
 {
-    ULONG mask;
-    ULONG i;
-
     if (!PhMainWndExiting)
         ProcessHacker_SaveAllSettings(PhMainWndHandle);
 
-    // Remove all icons to prevent them hanging around after we exit.
+    PhNfUninitialization();
 
-    mask = NotifyIconMask;
-    NotifyIconMask = 0; // prevent further icon updating
-
-    for (i = PH_ICON_MINIMUM; i != PH_ICON_MAXIMUM; i <<= 1)
-    {
-        if (mask & i)
-            PhRemoveNotifyIcon(i);
-    }
-
     // Notify plugins that we are shutting down.
 
     if (PhPluginsEnabled)
@@ -646,7 +621,7 @@
     {
     case ID_ESC_EXIT:
         {
-            if (PhGetIntegerSetting(L"HideOnClose") && NotifyIconMask != 0)
+            if (PhGetIntegerSetting(L"HideOnClose") && PhNfTestIconMask(PH_ICON_ALL))
                 ShowWindow(PhMainWndHandle, SW_HIDE);
         }
         break;
@@ -847,18 +822,8 @@
             }
 
             enable = !(GetMenuState(PhMainWndMenuHandle, Id, 0) & MF_CHECKED);
+            PhNfSetVisibleIcon(i, enable);
 
-            if (enable)
-            {
-                NotifyIconMask |= i;
-                PhAddNotifyIcon(i);
-            }
-            else
-            {
-                NotifyIconMask &= ~i;
-                PhRemoveNotifyIcon(i);
-            }
-
             CheckMenuItem(
                 PhMainWndMenuHandle,
                 Id,
@@ -1720,7 +1685,7 @@
     {
     case SC_CLOSE:
         {
-            if (PhGetIntegerSetting(L"HideOnClose") && NotifyIconMask != 0)
+            if (PhGetIntegerSetting(L"HideOnClose") && PhNfTestIconMask(PH_ICON_ALL))
             {
                 ShowWindow(PhMainWndHandle, SW_HIDE);
                 return TRUE;
@@ -1733,7 +1698,7 @@
             // may not have a chance to later.
             PhMwpSaveWindowSettings();
 
-            if (PhGetIntegerSetting(L"HideOnMinimize") && NotifyIconMask != 0)
+            if (PhGetIntegerSetting(L"HideOnMinimize") && PhNfTestIconMask(PH_ICON_ALL))
             {
                 ShowWindow(PhMainWndHandle, SW_HIDE);
                 return TRUE;
@@ -1950,29 +1915,7 @@
         break;
     case WM_PH_NOTIFY_ICON_MESSAGE:
         {
-            switch (LOWORD(LParam))
-            {
-            case WM_LBUTTONDOWN:
-                {
-                    if (PhGetIntegerSetting(L"IconSingleClick"))
-                        SendMessage(PhMainWndHandle, WM_PH_TOGGLE_VISIBLE, 0, 0);
-                }
-                break;
-            case WM_LBUTTONDBLCLK:
-                {
-                    if (!PhGetIntegerSetting(L"IconSingleClick"))
-                        SendMessage(PhMainWndHandle, WM_PH_TOGGLE_VISIBLE, 0, 0);
-                }
-                break;
-            case WM_RBUTTONUP:
-                {
-                    POINT location;
-
-                    GetCursorPos(&location);
-                    PhMwpShowIconContextMenu(location);
-                }
-                break;
-            }
+            PhNfForwardMessage(WParam, LParam);
         }
         break;
     case WM_PH_TOGGLE_VISIBLE:
@@ -2269,26 +2212,6 @@
     PostMessage(PhMainWndHandle, WM_PH_PROCESSES_UPDATED, 0, 0);
 }
 
-VOID NTAPI PhMwpProcessesUpdatedForIconsHandler(
-    __in_opt PVOID Parameter,
-    __in_opt PVOID Context
-    )
-{
-    // We do icon updating on the provider thread so we don't block the main GUI when 
-    // explorer is not responding.
-
-    if (NotifyIconMask & PH_ICON_CPU_HISTORY)
-        PhUpdateIconCpuHistory();
-    if (NotifyIconMask & PH_ICON_IO_HISTORY)
-        PhUpdateIconIoHistory();
-    if (NotifyIconMask & PH_ICON_COMMIT_HISTORY)
-        PhUpdateIconCommitHistory();
-    if (NotifyIconMask & PH_ICON_PHYSICAL_HISTORY)
-        PhUpdateIconPhysicalHistory();
-    if (NotifyIconMask & PH_ICON_CPU_USAGE)
-        PhUpdateIconCpuUsage();
-}
-
 VOID NTAPI PhMwpServiceAddedHandler(
     __in_opt PVOID Parameter,
     __in_opt PVOID Context
@@ -2388,6 +2311,7 @@
     ULONG id;
     PPH_STRING customFont;
     ULONG i;
+    ULONG maximum;
 
     if (PhGetIntegerSetting(L"MainWindowAlwaysOnTop"))
     {
@@ -2443,11 +2367,13 @@
     PhEnableServiceNonPoll = !!PhGetIntegerSetting(L"EnableServiceNonPoll");
     PhEnableNetworkProviderResolve = !!PhGetIntegerSetting(L"EnableNetworkResolve");
 
-    NotifyIconMask = PhGetIntegerSetting(L"IconMask");
+    PhNfLoadStage1();
 
-    for (i = PH_ICON_MINIMUM; i != PH_ICON_MAXIMUM; i <<= 1)
+    maximum = PhNfGetMaximumIconId();
+
+    for (i = PH_ICON_MINIMUM; i != maximum; i <<= 1)
     {
-        if (NotifyIconMask & i)
+        if (PhNfTestIconMask(i))
         {
             switch (i)
             {
@@ -2519,7 +2445,8 @@
     if (NetworkTreeListLoaded)
         PhSaveSettingsNetworkTreeList();
 
-    PhSetIntegerSetting(L"IconMask", NotifyIconMask);
+    PhNfSaveSettings();
+
     PhSetIntegerSetting(L"IconNotifyMask", NotifyIconNotifyMask);
 
     PhSaveWindowPlacementToSetting(L"MainWindowPosition", L"MainWindowSize", PhMainWndHandle);
@@ -3169,7 +3096,7 @@
     PhFree(processItems);
 }
 
-VOID PhMwpShowIconContextMenu(
+VOID PhShowIconContextMenu(
     __in POINT Location
     )
 {
@@ -3390,17 +3317,7 @@
     __in ULONG Flags
     )
 {
-    ULONG i;
-
-    // Find a visible icon to display the balloon tip on.
-    for (i = PH_ICON_MINIMUM; i != PH_ICON_MAXIMUM; i <<= 1)
-    {
-        if (NotifyIconMask & i)
-        {
-            PhShowBalloonTipNotifyIcon(i, Title, Text, 10, Flags);
-            break;
-        }
-    }
+    PhNfShowBalloonTip(0, Title, Text, 10, Flags);
 }
 
 BOOLEAN PhMwpPluginNotifyEvent(
Index: notifico.c
===================================================================
--- notifico.c	(revision 4366)
+++ notifico.c	(working copy)
@@ -1,34 +1,446 @@
+/*
+ * Process Hacker - 
+ *   notification icon manager
+ * 
+ * Copyright (C) 2011 wj32
+ * 
+ * This file is part of Process Hacker.
+ * 
+ * Process Hacker is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * Process Hacker is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with Process Hacker.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
 #include <phapp.h>
 #include <settings.h>
+#include <extmgri.h>
+#include <phplug.h>
+#include <notifico.h>
+#include <windowsx.h>
 
-static HICON BlackIcon = NULL;
-static HBITMAP BlackIconMask = NULL;
+HICON PhNfpGetBlackIcon(
+    VOID
+    );
 
-HICON PhpGetBlackIcon()
+BOOLEAN PhNfpAddNotifyIcon(
+    __in ULONG Id
+    );
+
+BOOLEAN PhNfpRemoveNotifyIcon(
+    __in ULONG Id
+    );
+
+BOOLEAN PhNfpModifyNotifyIcon(
+    __in ULONG Id,
+    __in ULONG Flags,
+    __in_opt PWSTR Text,
+    __in_opt HICON Icon
+    );
+
+VOID PhNfpProcessesUpdatedHandler(
+    __in_opt PVOID Parameter,
+    __in_opt PVOID Context
+    );
+
+VOID PhNfpUpdateRegisteredIcon(
+    __in PPH_NF_ICON Icon
+    );
+
+VOID PhNfpUpdateIconCpuHistory(
+    VOID
+    );
+
+VOID PhNfpUpdateIconIoHistory(
+    VOID
+    );
+
+VOID PhNfpUpdateIconCommitHistory(
+    VOID
+    );
+
+VOID PhNfpUpdateIconPhysicalHistory(
+    VOID
+    );
+
+VOID PhNfpUpdateIconCpuUsage(
+    VOID
+    );
+
+BOOLEAN PhNfTerminating = FALSE;
+ULONG PhNfIconMask;
+ULONG PhNfIconNotifyMask;
+ULONG PhNfMaximumIconId = PH_ICON_DEFAULT_MAXIMUM;
+PPH_NF_ICON PhNfRegisteredIcons[32] = { 0 };
+
+PH_CALLBACK_REGISTRATION PhNfpProcessesUpdatedRegistration;
+HICON PhNfpBlackIcon = NULL;
+HBITMAP PhNfpBlackIconMask = NULL;
+
+VOID PhNfLoadStage1(
+    VOID
+    )
 {
-    if (!BlackIcon)
+    PPH_STRING iconList;
+    PH_STRINGREF part;
+    PH_STRINGREF remainingPart;
+
+    // Load settings for default icons.
+    PhNfIconMask = PhGetIntegerSetting(L"IconMask");
+
+    // Load settings for registered icons.
+
+    iconList = PhGetStringSetting(L"IconMaskList");
+    remainingPart = iconList->sr;
+
+    while (remainingPart.Length != 0)
     {
+        PhSplitStringRefAtChar(&remainingPart, '|', &part, &remainingPart);
+
+        if (part.Length != 0)
+        {
+            PH_STRINGREF pluginName;
+            ULONG subId;
+            PPH_NF_ICON icon;
+
+            if (PhEmParseCompoundId(&part, &pluginName, &subId) &&
+                (icon = PhNfFindIcon(&pluginName, subId)))
+            {
+                PhNfIconMask |= icon->IconId;
+            }
+        }
+    }
+
+    PhDereferenceObject(iconList);
+}
+
+VOID PhNfLoadStage2(
+    VOID
+    )
+{
+    ULONG i;
+
+    for (i = PH_ICON_MINIMUM; i != PhNfMaximumIconId; i <<= 1)
+    {
+        if (PhNfIconMask & i)
+            PhNfpAddNotifyIcon(i);
+    }
+
+    PhRegisterCallback(
+        &PhProcessesUpdatedEvent,
+        PhNfpProcessesUpdatedHandler,
+        NULL,
+        &PhNfpProcessesUpdatedRegistration
+        );
+}
+
+VOID PhNfSaveSettings(
+    VOID
+    )
+{
+    ULONG registeredIconMask;
+
+    PhSetIntegerSetting(L"IconMask", PhNfIconMask & PH_ICON_DEFAULT_ALL);
+
+    registeredIconMask = PhNfIconMask & ~PH_ICON_DEFAULT_ALL;
+
+    if (registeredIconMask != 0)
+    {
+        PH_STRING_BUILDER iconListBuilder;
+        ULONG i;
+
+        PhInitializeStringBuilder(&iconListBuilder, 60);
+
+        for (i = 0; i < sizeof(PhNfRegisteredIcons) / sizeof(PPH_NF_ICON); i++)
+        {
+            if (PhNfRegisteredIcons[i])
+            {
+                if (registeredIconMask & PhNfRegisteredIcons[i]->IconId)
+                {
+                    PhAppendFormatStringBuilder(
+                        &iconListBuilder,
+                        L"+%s+%u|",
+                        PhNfRegisteredIcons[i]->Plugin->Name,
+                        PhNfRegisteredIcons[i]->SubId
+                        );
+                }
+            }
+        }
+
+        if (iconListBuilder.String->Length != 0)
+            PhRemoveStringBuilder(&iconListBuilder, iconListBuilder.String->Length / 2 - 1, 1);
+
+        PhSetStringSetting2(L"IconMaskList", &iconListBuilder.String->sr);
+        PhDeleteStringBuilder(&iconListBuilder);
+    }
+}
+
+VOID PhNfUninitialization(
+    VOID
+    )
+{
+    ULONG i;
+
+    // Remove all icons to prevent them hanging around after we exit.
+
+    PhNfTerminating = TRUE; // prevent further icon updating
+
+    for (i = PH_ICON_MINIMUM; i != PhNfMaximumIconId; i <<= 1)
+    {
+        if (PhNfIconMask & i)
+            PhNfpRemoveNotifyIcon(i);
+    }
+}
+
+VOID PhNfForwardMessage(
+    __in ULONG_PTR WParam,
+    __in ULONG_PTR LParam
+    )
+{
+    ULONG iconIndex;
+
+    iconIndex = HIWORD(LParam);
+
+    if (iconIndex < sizeof(PhNfRegisteredIcons) / sizeof(PPH_NF_ICON) && PhNfRegisteredIcons[iconIndex])
+    {
+        if (PhNfRegisteredIcons[iconIndex]->MessageCallback)
+        {
+            if (PhNfRegisteredIcons[iconIndex]->MessageCallback(
+                WParam,
+                LParam,
+                PhNfRegisteredIcons[iconIndex]->Context
+                ))
+            {
+                return;
+            }
+        }
+    }
+
+    switch (LOWORD(LParam))
+    {
+    case WM_LBUTTONDOWN:
+        {
+            if (PhGetIntegerSetting(L"IconSingleClick"))
+                ProcessHacker_ToggleVisible(PhMainWndHandle);
+        }
+        break;
+    case WM_LBUTTONDBLCLK:
+        {
+            if (!PhGetIntegerSetting(L"IconSingleClick"))
+                ProcessHacker_ToggleVisible(PhMainWndHandle);
+        }
+        break;
+    case WM_RBUTTONUP:
+        {
+            POINT location;
+
+            GetCursorPos(&location);
+            PhShowIconContextMenu(location);
+        }
+        break;
+    }
+}
+
+ULONG PhNfGetMaximumIconId(
+    VOID
+    )
+{
+    return PhNfMaximumIconId;
+}
+
+ULONG PhNfTestIconMask(
+    __in ULONG Id
+    )
+{
+    return PhNfIconMask & Id;
+}
+
+VOID PhNfSetVisibleIcon(
+    __in ULONG Id,
+    __in BOOLEAN Visible
+    )
+{
+    if (Visible)
+    {
+        PhNfIconMask |= Id;
+        PhNfpAddNotifyIcon(Id);
+    }
+    else
+    {
+        PhNfIconMask &= ~Id;
+        PhNfpRemoveNotifyIcon(Id);
+    }
+}
+
+BOOLEAN PhNfShowBalloonTip(
+    __in_opt ULONG Id,
+    __in PWSTR Title,
+    __in PWSTR Text,
+    __in ULONG Timeout,
+    __in ULONG Flags
+    )
+{
+    NOTIFYICONDATA notifyIcon = { NOTIFYICONDATA_V3_SIZE };
+
+    if (Id == 0)
+    {
+        // Choose the first visible icon.
+        Id = PhNfIconMask;
+    }
+
+    if (!_BitScanForward(&Id, Id))
+        return FALSE;
+
+    notifyIcon.hWnd = PhMainWndHandle;
+    notifyIcon.uID = Id;
+    notifyIcon.uFlags = NIF_INFO;
+    wcsncpy_s(notifyIcon.szInfoTitle, sizeof(notifyIcon.szInfoTitle) / sizeof(WCHAR), Title, _TRUNCATE);
+    wcsncpy_s(notifyIcon.szInfo, sizeof(notifyIcon.szInfo) / sizeof(WCHAR), Text, _TRUNCATE);
+    notifyIcon.uTimeout = Timeout;
+    notifyIcon.dwInfoFlags = Flags;
+
+    Shell_NotifyIcon(NIM_MODIFY, &notifyIcon);
+
+    return TRUE;
+}
+
+HICON PhNfBitmapToIcon(
+    __in HBITMAP Bitmap
+    )
+{
+    ICONINFO iconInfo;
+
+    PhNfpGetBlackIcon();
+
+    iconInfo.fIcon = TRUE;
+    iconInfo.xHotspot = 0;
+    iconInfo.yHotspot = 0;
+    iconInfo.hbmMask = PhNfpBlackIconMask;
+    iconInfo.hbmColor = Bitmap;
+
+    return CreateIconIndirect(&iconInfo);
+}
+
+PPH_NF_ICON PhNfRegisterIcon(
+    __in struct _PH_PLUGIN *Plugin,
+    __in ULONG SubId,
+    __in_opt PVOID Context,
+    __in PWSTR Name,
+    __reserved ULONG Flags,
+    __in_opt PPH_NF_ICON_UPDATE_CALLBACK UpdateCallback,
+    __in_opt PPH_NF_ICON_MESSAGE_CALLBACK MessageCallback
+    )
+{
+    PPH_NF_ICON icon;
+    ULONG iconId;
+    ULONG iconIndex;
+
+    if (PhNfMaximumIconId == PH_ICON_LIMIT)
+    {
+        // No room for any more icons.
+        return NULL;
+    }
+
+    iconId = PhNfMaximumIconId;
+
+    if (!_BitScanReverse(&iconIndex, iconId) ||
+        iconIndex >= sizeof(PhNfRegisteredIcons) / sizeof(PPH_NF_ICON))
+    {
+        // Should never happen.
+        return NULL;
+    }
+
+    PhNfMaximumIconId <<= 1;
+
+    icon = PhAllocate(sizeof(PH_NF_ICON));
+    icon->Plugin = Plugin;
+    icon->SubId = SubId;
+    icon->Context = Context;
+    icon->Name = Name;
+    icon->Flags = Flags;
+    icon->IconId = iconId;
+    icon->UpdateCallback = UpdateCallback;
+    icon->MessageCallback = MessageCallback;
+
+    PhNfRegisteredIcons[iconIndex] = icon;
+
+    return icon;
+}
+
+PPH_NF_ICON PhNfGetIconById(
+    __in ULONG Id
+    )
+{
+    ULONG iconIndex;
+
+    if (!_BitScanReverse(&iconIndex, Id))
+        return NULL;
+
+    return PhNfRegisteredIcons[iconIndex];
+}
+
+PPH_NF_ICON PhNfFindIcon(
+    __in PPH_STRINGREF PluginName,
+    __in ULONG SubId
+    )
+{
+    ULONG i;
+
+    for (i = 0; i < sizeof(PhNfRegisteredIcons) / sizeof(PPH_NF_ICON); i++)
+    {
+        if (PhNfRegisteredIcons[i])
+        {
+            if (PhNfRegisteredIcons[i]->SubId == SubId &&
+                PhEqualStringRef(PluginName, &PhNfRegisteredIcons[i]->Plugin->AppContext.AppName, FALSE))
+            {
+                return PhNfRegisteredIcons[i];
+            }
+        }
+    }
+
+    return NULL;
+}
+
+HICON PhNfpGetBlackIcon(
+    VOID
+    )
+{
+    if (!PhNfpBlackIcon)
+    {
         ICONINFO iconInfo;
 
         // It doesn't really matter what resolution the icon is at because when it's scaled up, it will 
         // still be all black.
-        BlackIcon = (HICON)LoadImage(PhInstanceHandle, MAKEINTRESOURCE(IDI_BLACK), IMAGE_ICON, 16, 16, 0);
+        PhNfpBlackIcon = (HICON)LoadImage(PhInstanceHandle, MAKEINTRESOURCE(IDI_BLACK), IMAGE_ICON, 16, 16, 0);
 
-        GetIconInfo(BlackIcon, &iconInfo);
+        GetIconInfo(PhNfpBlackIcon, &iconInfo);
 
-        BlackIconMask = iconInfo.hbmMask;
+        PhNfpBlackIconMask = iconInfo.hbmMask;
         DeleteObject(iconInfo.hbmColor);
     }
 
-    return BlackIcon;
+    return PhNfpBlackIcon;
 }
 
-VOID PhAddNotifyIcon(
+BOOLEAN PhNfpAddNotifyIcon(
     __in ULONG Id
     )
 {
     NOTIFYICONDATA notifyIcon = { NOTIFYICONDATA_V3_SIZE };
 
+    // The IDs we pass to explorer are bit indicies, not the normal mask values.
+
+    if (!_BitScanForward(&Id, Id))
+        return FALSE;
+
     notifyIcon.hWnd = PhMainWndHandle;
     notifyIcon.uID = Id;
     notifyIcon.uFlags = NIF_ICON | NIF_MESSAGE | NIF_TIP;
@@ -36,24 +448,31 @@
 
     wcsncpy_s(notifyIcon.szTip, sizeof(notifyIcon.szTip) / sizeof(WCHAR), PhApplicationName, _TRUNCATE);
 
-    notifyIcon.hIcon = PhpGetBlackIcon();
+    notifyIcon.hIcon = PhNfpGetBlackIcon();
 
     Shell_NotifyIcon(NIM_ADD, &notifyIcon);
+
+    return TRUE;
 }
 
-VOID PhRemoveNotifyIcon(
+BOOLEAN PhNfpRemoveNotifyIcon(
     __in ULONG Id
     )
 {
     NOTIFYICONDATA notifyIcon = { NOTIFYICONDATA_V3_SIZE };
 
+    if (!_BitScanForward(&Id, Id))
+        return FALSE;
+
     notifyIcon.hWnd = PhMainWndHandle;
     notifyIcon.uID = Id;
 
     Shell_NotifyIcon(NIM_DELETE, &notifyIcon);
+
+    return TRUE;
 }
 
-VOID PhModifyNotifyIcon(
+BOOLEAN PhNfpModifyNotifyIcon(
     __in ULONG Id,
     __in ULONG Flags,
     __in_opt PWSTR Text,
@@ -62,6 +481,9 @@
 {
     NOTIFYICONDATA notifyIcon = { NOTIFYICONDATA_V3_SIZE };
 
+    if (!_BitScanForward(&Id, Id))
+        return FALSE;
+
     notifyIcon.hWnd = PhMainWndHandle;
     notifyIcon.uID = Id;
     notifyIcon.uFlags = Flags;
@@ -74,50 +496,97 @@
     if (!Shell_NotifyIcon(NIM_MODIFY, &notifyIcon))
     {
         // Explorer probably died and we lost our icon. Try to add the icon, and try again.
-        PhAddNotifyIcon(Id);
+        PhNfpAddNotifyIcon(Id);
         Shell_NotifyIcon(NIM_MODIFY, &notifyIcon);
     }
+
+    return TRUE;
 }
 
-VOID PhShowBalloonTipNotifyIcon(
-    __in ULONG Id,
-    __in PWSTR Title,
-    __in PWSTR Text,
-    __in ULONG Timeout,
-    __in ULONG Flags
+VOID PhNfpProcessesUpdatedHandler(
+    __in_opt PVOID Parameter,
+    __in_opt PVOID Context
     )
 {
-    NOTIFYICONDATA notifyIcon = { NOTIFYICONDATA_V3_SIZE };
+    ULONG registeredIconMask;
 
-    notifyIcon.hWnd = PhMainWndHandle;
-    notifyIcon.uID = Id;
-    notifyIcon.uFlags = NIF_INFO;
-    wcsncpy_s(notifyIcon.szInfoTitle, sizeof(notifyIcon.szInfoTitle) / sizeof(WCHAR), Title, _TRUNCATE);
-    wcsncpy_s(notifyIcon.szInfo, sizeof(notifyIcon.szInfo) / sizeof(WCHAR), Text, _TRUNCATE);
-    notifyIcon.uTimeout = Timeout;
-    notifyIcon.dwInfoFlags = Flags;
+    // We do icon updating on the provider thread so we don't block the main GUI when 
+    // explorer is not responding.
 
-    Shell_NotifyIcon(NIM_MODIFY, &notifyIcon);
+    if (PhNfIconMask & PH_ICON_CPU_HISTORY)
+        PhNfpUpdateIconCpuHistory();
+    if (PhNfIconMask & PH_ICON_IO_HISTORY)
+        PhNfpUpdateIconIoHistory();
+    if (PhNfIconMask & PH_ICON_COMMIT_HISTORY)
+        PhNfpUpdateIconCommitHistory();
+    if (PhNfIconMask & PH_ICON_PHYSICAL_HISTORY)
+        PhNfpUpdateIconPhysicalHistory();
+    if (PhNfIconMask & PH_ICON_CPU_USAGE)
+        PhNfpUpdateIconCpuUsage();
+
+    registeredIconMask = PhNfIconMask & ~PH_ICON_DEFAULT_ALL;
+
+    if (registeredIconMask != 0)
+    {
+        ULONG i;
+
+        for (i = 0; i < sizeof(PhNfRegisteredIcons) / sizeof(PPH_NF_ICON); i++)
+        {
+            if (PhNfRegisteredIcons[i] && (registeredIconMask & PhNfRegisteredIcons[i]->IconId))
+            {
+                PhNfpUpdateRegisteredIcon(PhNfRegisteredIcons[i]);
+            }
+        }
+    }
 }
 
-HICON PhBitmapToIcon(
-    __in HBITMAP Bitmap
+VOID PhNfpUpdateRegisteredIcon(
+    __in PPH_NF_ICON Icon
     )
 {
-    ICONINFO iconInfo;
+    PVOID newIconOrBitmap;
+    BOOLEAN isBitmap;
+    PPH_STRING newText;
+    HICON newIcon;
+    ULONG flags;
 
-    PhpGetBlackIcon();
+    if (!Icon->UpdateCallback)
+        return;
 
-    iconInfo.fIcon = TRUE;
-    iconInfo.xHotspot = 0;
-    iconInfo.yHotspot = 0;
-    iconInfo.hbmMask = BlackIconMask;
-    iconInfo.hbmColor = Bitmap;
+    newIconOrBitmap = NULL;
+    isBitmap = FALSE;
+    newText = NULL;
+    newIcon = NULL;
+    flags = 0;
 
-    return CreateIconIndirect(&iconInfo);
+    Icon->UpdateCallback(
+        &newIconOrBitmap,
+        &isBitmap,
+        &newText,
+        Icon->Context
+        );
+
+    if (newIconOrBitmap)
+    {
+        if (isBitmap)
+            newIcon = PhNfBitmapToIcon(newIconOrBitmap);
+        else
+            newIcon = newIconOrBitmap;
+
+        flags |= NIF_ICON;
+    }
+
+    if (newText)
+        flags |= NIF_TIP;
+
+    if (flags != 0)
+        PhNfpModifyNotifyIcon(Icon->IconId, flags, PhGetString(newText), newIcon);
+
+    if (newText)
+        PhDereferenceObject(newText);
 }
 
-static VOID PhpBeginBitmap(
+static VOID PhNfpBeginBitmap(
     __in ULONG Width,
     __in ULONG Height,
     __out HBITMAP *Bitmap,
@@ -158,7 +627,9 @@
     *OldBitmap = SelectObject(hdc, bitmap);
 }
 
-VOID PhUpdateIconCpuHistory()
+VOID PhNfpUpdateIconCpuHistory(
+    VOID
+    )
 {
     static PH_GRAPH_DRAW_INFO drawInfo =
     {
@@ -203,13 +674,13 @@
     drawInfo.LineBackColor1 = PhHalveColorBrightness(PhCsColorCpuKernel);
     drawInfo.LineBackColor2 = PhHalveColorBrightness(PhCsColorCpuUser);
 
-    PhpBeginBitmap(16, 16, &bitmap, &bits, &hdc, &oldBitmap);
+    PhNfpBeginBitmap(16, 16, &bitmap, &bits, &hdc, &oldBitmap);
 
     if (bits)
         PhDrawGraphDirect(hdc, bits, &drawInfo);
 
     SelectObject(hdc, oldBitmap);
-    icon = PhBitmapToIcon(bitmap);
+    icon = PhNfBitmapToIcon(bitmap);
 
     // Text
 
@@ -236,13 +707,15 @@
     text = PhFormat(format, maxCpuProcessItem ? 8 : 3, 128);
     if (maxCpuProcessItem) PhDereferenceObject(maxCpuProcessItem);
 
-    PhModifyNotifyIcon(PH_ICON_CPU_HISTORY, NIF_TIP | NIF_ICON, text->Buffer, icon);
+    PhNfpModifyNotifyIcon(PH_ICON_CPU_HISTORY, NIF_TIP | NIF_ICON, text->Buffer, icon);
 
     DestroyIcon(icon);
     PhDereferenceObject(text);
 }
 
-VOID PhUpdateIconIoHistory()
+VOID PhNfpUpdateIconIoHistory(
+    VOID
+    )
 {
     static PH_GRAPH_DRAW_INFO drawInfo =
     {
@@ -303,13 +776,13 @@
     drawInfo.LineBackColor1 = PhHalveColorBrightness(PhCsColorIoReadOther);
     drawInfo.LineBackColor2 = PhHalveColorBrightness(PhCsColorIoWrite);
 
-    PhpBeginBitmap(16, 16, &bitmap, &bits, &hdc, &oldBitmap);
+    PhNfpBeginBitmap(16, 16, &bitmap, &bits, &hdc, &oldBitmap);
 
     if (bits)
         PhDrawGraphDirect(hdc, bits, &drawInfo);
 
     SelectObject(hdc, oldBitmap);
-    icon = PhBitmapToIcon(bitmap);
+    icon = PhNfBitmapToIcon(bitmap);
 
     // Text
 
@@ -336,13 +809,15 @@
     text = PhFormat(format, maxIoProcessItem ? 8 : 6, 128);
     if (maxIoProcessItem) PhDereferenceObject(maxIoProcessItem);
 
-    PhModifyNotifyIcon(PH_ICON_IO_HISTORY, NIF_TIP | NIF_ICON, text->Buffer, icon);
+    PhNfpModifyNotifyIcon(PH_ICON_IO_HISTORY, NIF_TIP | NIF_ICON, text->Buffer, icon);
 
     DestroyIcon(icon);
     PhDereferenceObject(text);
 }
 
-VOID PhUpdateIconCommitHistory()
+VOID PhNfpUpdateIconCommitHistory(
+    VOID
+    )
 {
     static PH_GRAPH_DRAW_INFO drawInfo =
     {
@@ -386,13 +861,13 @@
     drawInfo.LineColor1 = PhCsColorPrivate;
     drawInfo.LineBackColor1 = PhHalveColorBrightness(PhCsColorPrivate);
 
-    PhpBeginBitmap(16, 16, &bitmap, &bits, &hdc, &oldBitmap);
+    PhNfpBeginBitmap(16, 16, &bitmap, &bits, &hdc, &oldBitmap);
 
     if (bits)
         PhDrawGraphDirect(hdc, bits, &drawInfo);
 
     SelectObject(hdc, oldBitmap);
-    icon = PhBitmapToIcon(bitmap);
+    icon = PhNfBitmapToIcon(bitmap);
 
     // Text
 
@@ -406,13 +881,15 @@
 
     text = PhFormat(format, 5, 96);
 
-    PhModifyNotifyIcon(PH_ICON_COMMIT_HISTORY, NIF_TIP | NIF_ICON, text->Buffer, icon);
+    PhNfpModifyNotifyIcon(PH_ICON_COMMIT_HISTORY, NIF_TIP | NIF_ICON, text->Buffer, icon);
 
     DestroyIcon(icon);
     PhDereferenceObject(text);
 }
 
-VOID PhUpdateIconPhysicalHistory()
+VOID PhNfpUpdateIconPhysicalHistory(
+    VOID
+    )
 {
     static PH_GRAPH_DRAW_INFO drawInfo =
     {
@@ -457,13 +934,13 @@
     drawInfo.LineColor1 = PhCsColorPhysical;
     drawInfo.LineBackColor1 = PhHalveColorBrightness(PhCsColorPhysical);
 
-    PhpBeginBitmap(16, 16, &bitmap, &bits, &hdc, &oldBitmap);
+    PhNfpBeginBitmap(16, 16, &bitmap, &bits, &hdc, &oldBitmap);
 
     if (bits)
         PhDrawGraphDirect(hdc, bits, &drawInfo);
 
     SelectObject(hdc, oldBitmap);
-    icon = PhBitmapToIcon(bitmap);
+    icon = PhNfBitmapToIcon(bitmap);
 
     // Text
 
@@ -478,13 +955,15 @@
 
     text = PhFormat(format, 5, 96);
 
-    PhModifyNotifyIcon(PH_ICON_PHYSICAL_HISTORY, NIF_TIP | NIF_ICON, text->Buffer, icon);
+    PhNfpModifyNotifyIcon(PH_ICON_PHYSICAL_HISTORY, NIF_TIP | NIF_ICON, text->Buffer, icon);
 
     DestroyIcon(icon);
     PhDereferenceObject(text);
 }
 
-VOID PhUpdateIconCpuUsage()
+VOID PhNfpUpdateIconCpuUsage(
+    VOID
+    )
 {
     HBITMAP bitmap;
     HDC hdc;
@@ -497,7 +976,7 @@
 
     // Icon
 
-    PhpBeginBitmap(16, 16, &bitmap, NULL, &hdc, &oldBitmap);
+    PhNfpBeginBitmap(16, 16, &bitmap, NULL, &hdc, &oldBitmap);
 
     // This stuff is copied from CpuUsageIcon.cs (PH 1.x).
     {
@@ -574,7 +1053,7 @@
     }
 
     SelectObject(hdc, oldBitmap);
-    icon = PhBitmapToIcon(bitmap);
+    icon = PhNfBitmapToIcon(bitmap);
 
     // Text
 
@@ -596,7 +1075,7 @@
     text = PhFormatString(L"CPU usage: %.2f%%%s", (PhCpuKernelUsage + PhCpuUserUsage) * 100, PhGetStringOrEmpty(maxCpuText));
     if (maxCpuText) PhDereferenceObject(maxCpuText);
 
-    PhModifyNotifyIcon(PH_ICON_CPU_USAGE, NIF_TIP | NIF_ICON, text->Buffer, icon);
+    PhNfpModifyNotifyIcon(PH_ICON_CPU_USAGE, NIF_TIP | NIF_ICON, text->Buffer, icon);
 
     DestroyIcon(icon);
     PhDereferenceObject(text);
Index: ProcessHacker.vcxproj
===================================================================
--- ProcessHacker.vcxproj	(revision 4372)
+++ ProcessHacker.vcxproj	(working copy)
@@ -329,6 +329,7 @@
     <ClInclude Include="include\extmgr.h" />
     <ClInclude Include="include\extmgri.h" />
     <ClInclude Include="include\mainwndp.h" />
+    <ClInclude Include="include\notifico.h" />
     <ClInclude Include="include\phsvccl.h" />
     <ClInclude Include="include\uimodels.h" />
     <ClInclude Include="mxml\config.h" />
Index: ProcessHacker.vcxproj.filters
===================================================================
--- ProcessHacker.vcxproj.filters	(revision 4372)
+++ ProcessHacker.vcxproj.filters	(working copy)
@@ -527,6 +527,9 @@
     <ClInclude Include="include\extmgri.h">
       <Filter>Headers</Filter>
     </ClInclude>
+    <ClInclude Include="include\notifico.h">
+      <Filter>Headers</Filter>
+    </ClInclude>
   </ItemGroup>
   <ItemGroup>
     <None Include="resources\application.bmp">
Index: resource.h
===================================================================
--- resource.h	(revision 4366)
+++ resource.h	(working copy)
@@ -45,6 +45,7 @@
 #define IDD_HEAPS                       132
 #define ID_SHOWCONTEXTMENU              132
 #define IDR_PRIVILEGE                   133
+#define ID_TRAYICONS_CUSTOM             133
 #define IDR_FINDOBJ                     134
 #define IDD_HIDDENPROCESSES             135
 #define IDD_RUNAS                       136
@@ -522,7 +523,6 @@
 #define ID_VIEW_TRAYICONS               40092
 #define ID_TRAYICONS_CPUHISTORY         40093
 #define ID_TRAYICONS_CPUUSAGE           40094
-#define ID_TRAYICONS_I                  40095
 #define ID_TRAYICONS_COMMITHISTORY      40096
 #define ID_TRAYICONS_PHYSICALMEMORYHISTORY 40097
 #define ID_VIEW_REFRESH                 40098
@@ -672,6 +672,6 @@
 #define _APS_NEXT_RESOURCE_VALUE        196
 #define _APS_NEXT_COMMAND_VALUE         40252
 #define _APS_NEXT_CONTROL_VALUE         1294
-#define _APS_NEXT_SYMED_VALUE           133
+#define _APS_NEXT_SYMED_VALUE           134
 #endif
 #endif
Index: settings.c
===================================================================
--- settings.c	(revision 4372)
+++ settings.c	(working copy)
@@ -100,6 +100,7 @@
     PhpAddIntegerSetting(L"HideUnnamedHandles", L"1");
     PhpAddIntegerSetting(L"HighlightingDuration", L"3e8"); // 1000ms
     PhpAddIntegerSetting(L"IconMask", L"1"); // PH_ICON_CPU_HISTORY
+    PhpAddStringSetting(L"IconMaskList", L"");
     PhpAddIntegerSetting(L"IconNotifyMask", L"c"); // PH_NOTIFY_SERVICE_CREATE | PH_NOTIFY_SERVICE_DELETE
     PhpAddIntegerSetting(L"IconProcesses", L"a"); // 10
     PhpAddIntegerSetting(L"IconSingleClick", L"0");
Index: thrdlist.c
===================================================================
--- thrdlist.c	(revision 4374)
+++ thrdlist.c	(working copy)
@@ -2,7 +2,7 @@
  * Process Hacker - 
  *   thread list
  * 
- * Copyright (C) 2010-2011 wj32
+ * Copyright (C) 2011 wj32
  * 
  * This file is part of Process Hacker.
  * 
Index: include/notifico.h
===================================================================
--- include/notifico.h	(revision 0)
+++ include/notifico.h	(revision 0)
@@ -0,0 +1,107 @@
+#ifndef PH_NOTIFICO_H
+#define PH_NOTIFICO_H
+
+#define PH_ICON_MINIMUM 0x1
+#define PH_ICON_CPU_HISTORY 0x1
+#define PH_ICON_IO_HISTORY 0x2
+#define PH_ICON_COMMIT_HISTORY 0x4
+#define PH_ICON_PHYSICAL_HISTORY 0x8
+#define PH_ICON_CPU_USAGE 0x10
+#define PH_ICON_DEFAULT_MAXIMUM 0x20
+#define PH_ICON_DEFAULT_ALL 0x3f
+
+#define PH_ICON_LIMIT 0x80000000
+#define PH_ICON_ALL 0xffffffff
+
+typedef VOID (NTAPI *PPH_NF_ICON_UPDATE_CALLBACK)(
+    __out PVOID *NewIconOrBitmap,
+    __out PBOOLEAN IsBitmap,
+    __out PPH_STRING *NewText,
+    __in_opt PVOID Context
+    );
+
+typedef BOOLEAN (NTAPI *PPH_NF_ICON_MESSAGE_CALLBACK)(
+    __in ULONG_PTR WParam,
+    __in ULONG_PTR LParam,
+    __in_opt PVOID Context
+    );
+
+typedef struct _PH_NF_ICON
+{
+    struct _PH_PLUGIN *Plugin;
+    ULONG SubId;
+    PVOID Context;
+
+    PWSTR Name;
+    ULONG Flags;
+    ULONG IconId;
+    PPH_NF_ICON_UPDATE_CALLBACK UpdateCallback;
+    PPH_NF_ICON_MESSAGE_CALLBACK MessageCallback;
+} PH_NF_ICON, *PPH_NF_ICON;
+
+VOID PhNfLoadStage1(
+    VOID
+    );
+
+VOID PhNfLoadStage2(
+    VOID
+    );
+
+VOID PhNfSaveSettings(
+    VOID
+    );
+
+VOID PhNfUninitialization(
+    VOID
+    );
+
+VOID PhNfForwardMessage(
+    __in ULONG_PTR WParam,
+    __in ULONG_PTR LParam
+    );
+
+ULONG PhNfGetMaximumIconId(
+    VOID
+    );
+
+ULONG PhNfTestIconMask(
+    __in ULONG Id
+    );
+
+VOID PhNfSetVisibleIcon(
+    __in ULONG Id,
+    __in BOOLEAN Visible
+    );
+
+BOOLEAN PhNfShowBalloonTip(
+    __in_opt ULONG Id,
+    __in PWSTR Title,
+    __in PWSTR Text,
+    __in ULONG Timeout,
+    __in ULONG Flags
+    );
+
+HICON PhNfBitmapToIcon(
+    __in HBITMAP Bitmap
+    );
+
+PPH_NF_ICON PhNfRegisterIcon(
+    __in struct _PH_PLUGIN *Plugin,
+    __in ULONG SubId,
+    __in_opt PVOID Context,
+    __in PWSTR Name,
+    __reserved ULONG Flags,
+    __in_opt PPH_NF_ICON_UPDATE_CALLBACK UpdateCallback,
+    __in_opt PPH_NF_ICON_MESSAGE_CALLBACK MessageCallback
+    );
+
+PPH_NF_ICON PhNfGetIconById(
+    __in ULONG Id
+    );
+
+PPH_NF_ICON PhNfFindIcon(
+    __in PPH_STRINGREF PluginName,
+    __in ULONG SubId
+    );
+
+#endif
