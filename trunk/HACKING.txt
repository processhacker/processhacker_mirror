Note to SVN users:
If you use SVN code you may encounter weird bugs. Please use releases instead.

Process Hacker is developed using Visual C# 2008 Express Edition, and 
will only work with C# compilers which support C# 3.0.

The build script relies on ILMerge being present in the default installation
location or in your PATH environment variable.
Also in order to build the installer you must have installed Inno Setup Quick
Start Pack.

GUIDE TO DIRECTORY ORGANIZATION
* Assistant - this a small program which is intended to be installed as a 
  system service. It can start a program as any user, including SYSTEM, 
  LOCAL SERVICE and NETWORK SERVICE. It also changes the session ID and 
  winstation/desktop names of the new process to be able to interact with 
  the user even though it is running as SYSTEM (just like PsExec).
* KProcessHacker - the kernel-mode component of Process Hacker. Provides 
  Process Hacker with handle names and provides custom versions of Nt* 
  API functions.
* ProcessHacker - contains all of Process Hacker's source code.
  * Asm
    - this contains the assembler and disassembler, converted to unsafe 
      C# code from Oleh Yuschuk's Free Disassembler and Assembler.
  * Build
    - contains the build script - merges Aga.Controls.dll with 
      ProcessHacker.exe and creates the installer.
  * Common
    - contains data structures and global utility functions.
  * Components
    - contains various "user controls" like the (possibly 
      reusable) ProcessList, ThreadList and ServiceList. It also contains 
      third-party user controls like HexBox and VistaMenu.
  * Forms
    - contains all of the forms (windows) in Process Hacker.
  * Icons
    - contains *.ico files.
  * PE
    - contains the PE reader for reading imports and exports from 
      PE files (exe, dll, ocx, sys, etc.)
  * Properties
    - whatever Visual C# put in there.
  * Providers
    - contains the "providers" (classes which have threads updating 
      some sort of list or dictionary in the background) for processes, threads 
      and services.
  * Resources
    - contains PNG silk icons (from famfamfam.com).
  * Searchers
    - contains the "searchers" (classes which search process memory 
      in the background and add items to a results list) - heap searcher, 
      literal bytes searcher, regex searcher and string searcher/scanner.
  * Structs
    - contains the struct reader and definition parser. Struct 
      definition files have a syntax very similar to C.
  * Symbols
    - contains the symbol server. Uses dbghelp.dll, and because it does 
      not support multithreading, all calls are synchronized.
  * UI
    - contains reusable GUI code such as process/service actions and 
      notification icons.
 * ProcessHacker.Native - contains reusable Windows and Native API code.
  * Api
    - contains all function, enum and struct definitions. Native*.cs files 
      contain Native API definitions.
  * Memory
    - contains memory allocation classes.
  * Objects
    - contains NT object wrapper classes.
  * Security
    - contains security-related code, most of which is access-mask-related.

NOTES
 * Do not use OpenProcess, OpenThread, OpenProcessToken or OpenThreadToken. Instead, 
   use the ProcessHandle, ThreadHandle and GetToken functions, respectively. These 
   classes make common manipulation tasks much easier. They also use KProcessHacker 
   automatically, if available.
 * Similarly, do not use OpenService - use ServiceHandle instead.
